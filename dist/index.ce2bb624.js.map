{"mappings":"C,A,W,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,S,E,C,E,O,G,E,U,C,E,O,C,C,C,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,W,W,O,C,E,S,C,E,O,E,C,GCEA,IAgBA,EAhBI,EAAU,IAAI,IAgBlB,EAfA,SAAkB,CAAO,CAAE,CAAQ,EACjC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAG,EAAG,GAAK,EAC5C,EAAQ,GAAG,CAAC,CAAQ,CAAC,EAAE,CAAE,CACvB,QAAS,EACT,KAAM,CAAQ,CAAC,EAAI,EAAE,AACvB,EAEJ,C,G,E,Q,S,C,C,C,E,E,E,O,C,e,W,O,C,E,S,C,E,O,E,C,GCRA,IAkCA,EAlCI,EAAY,CAAC,EAkCjB,EAjCA,SAA4B,CAAE,EAC5B,IAAI,EAAQ,CAAS,CAAC,EAAG,CAKzB,OAJK,IACH,EAAQ,AAKZ,WACE,GAAI,CACF,MAAM,AAAI,OACZ,CAAE,MAAO,EAAK,CACZ,IAAI,EAAW,AAAA,CAAA,GAAK,EAAI,KAAI,AAAJ,EAAO,KAAK,CAAC,oEACrC,GAAI,EAGF,MAMI,AAAA,CAAA,GANc,CAAO,CAAC,EAAE,AAMnB,EAAK,OAAO,CAAC,0EAA2E,MAAQ,GAJ7G,CACA,MAAO,GACT,IAhBI,CAAS,CAAC,EAAG,CAAG,GAEX,CACT,C,GCVA,AAAA,EAAA,SAAA,QAAA,CAA8C,AAAA,EAAA,SAAA,YAAA,CAA6C,SAAS,KAAK,KAAK,CAAC,oKGe/G,IAAM,EACJ,AAAkB,aAAlB,OAAO,OAAyB,OAAS,CAAE,OAAQ,CAAA,EAAI,UAAW,CAAA,CAAE,EAChE,EAAa,AAAC,CAAA,EAAE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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","node_modules/@parcel/runtime-js/lib/runtime-923b20a4f6680476.js","src/amy.js","node_modules/detect-it/dist/detect-it.esm.js","node_modules/detect-it/src/index.ts","node_modules/@parcel/runtime-js/lib/runtime-bb1b19afa812a511.js","node_modules/@parcel/runtime-js/lib/runtime-390f47ac052fbbb5.js"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire7674\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire7674\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"iE7OH\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", function () { return $0380ce8f1f064ccc$export$6503ec6e8aabbaf; }, function (v) { return $0380ce8f1f064ccc$export$6503ec6e8aabbaf = v; });\nvar $0380ce8f1f064ccc$export$6503ec6e8aabbaf;\nvar $0380ce8f1f064ccc$export$f7ad0328861e2f03;\n\"use strict\";\nvar $0380ce8f1f064ccc$var$mapping = new Map();\nfunction $0380ce8f1f064ccc$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$0380ce8f1f064ccc$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $0380ce8f1f064ccc$var$resolve(id) {\n    var resolved = $0380ce8f1f064ccc$var$mapping.get(id);\n    if (resolved == null) throw new Error(\"Could not resolve bundle with id \" + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$0380ce8f1f064ccc$export$6503ec6e8aabbaf = $0380ce8f1f064ccc$var$register;\n$0380ce8f1f064ccc$export$f7ad0328861e2f03 = $0380ce8f1f064ccc$var$resolve;\n\n});\n\nparcelRegister(\"aNJCr\", function(module, exports) {\n\n$parcel$export(module.exports, \"getBundleURL\", function () { return $7dd1ddf6834435ca$export$bdfd709ae4826697; }, function (v) { return $7dd1ddf6834435ca$export$bdfd709ae4826697 = v; });\nvar $7dd1ddf6834435ca$export$bdfd709ae4826697;\nvar $7dd1ddf6834435ca$export$c9e73fbda7da57b6;\nvar $7dd1ddf6834435ca$export$5a759dc7a1cfb72a;\n\"use strict\";\nvar $7dd1ddf6834435ca$var$bundleURL = {};\nfunction $7dd1ddf6834435ca$var$getBundleURLCached(id) {\n    var value = $7dd1ddf6834435ca$var$bundleURL[id];\n    if (!value) {\n        value = $7dd1ddf6834435ca$var$getBundleURL();\n        $7dd1ddf6834435ca$var$bundleURL[id] = value;\n    }\n    return value;\n}\nfunction $7dd1ddf6834435ca$var$getBundleURL() {\n    try {\n        throw new Error();\n    } catch (err) {\n        var matches = (\"\" + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^)\\n]+/g);\n        if (matches) // The first two stack frames will be this function and getBundleURLCached.\n        // Use the 3rd one, which will be a runtime in the original bundle.\n        return $7dd1ddf6834435ca$var$getBaseURL(matches[2]);\n    }\n    return \"/\";\n}\nfunction $7dd1ddf6834435ca$var$getBaseURL(url) {\n    return (\"\" + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/.+)\\/[^/]+$/, \"$1\") + \"/\";\n}\n// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\nfunction $7dd1ddf6834435ca$var$getOrigin(url) {\n    var matches = (\"\" + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^/]+/);\n    if (!matches) throw new Error(\"Origin not found\");\n    return matches[0];\n}\n$7dd1ddf6834435ca$export$bdfd709ae4826697 = $7dd1ddf6834435ca$var$getBundleURLCached;\n$7dd1ddf6834435ca$export$c9e73fbda7da57b6 = $7dd1ddf6834435ca$var$getBaseURL;\n$7dd1ddf6834435ca$export$5a759dc7a1cfb72a = $7dd1ddf6834435ca$var$getOrigin;\n\n});\n\nvar $b28b4bddaf7000b1$exports = {};\n\n\n(parcelRequire(\"iE7OH\")).register((parcelRequire(\"aNJCr\")).getBundleURL(\"3kDX5\"), JSON.parse('[\"3kDX5\",\"index.ce2bb624.js\",\"gGa5s\",\"icon-arrow-left.30f94de3.svg\",\"7XIqG\",\"icon-arrow-right.e6109eac.svg\"]'));\n\n// We want to import a feature detection from the detect-it package\n// so it doesn't throw if no window or matchMedia\nvar $4ccfa2cae22339e2$var$w = typeof window !== \"undefined\" ? window : {\n    screen: {},\n    navigator: {}\n};\nvar $4ccfa2cae22339e2$var$matchMedia = ($4ccfa2cae22339e2$var$w.matchMedia || function() {\n    return {\n        matches: false\n    };\n}).bind($4ccfa2cae22339e2$var$w);\n// passive events test\n// adapted from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\nvar $4ccfa2cae22339e2$var$passiveOptionAccessed = false;\nvar $4ccfa2cae22339e2$var$options = {\n    get passive () {\n        return $4ccfa2cae22339e2$var$passiveOptionAccessed = true;\n    }\n};\n// have to set and remove a no-op listener instead of null\n// (which was used previously), because Edge v15 throws an error\n// when providing a null callback.\n// https://github.com/rafgraph/detect-passive-events/pull/3\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nvar $4ccfa2cae22339e2$var$noop = function() {};\n$4ccfa2cae22339e2$var$w.addEventListener && $4ccfa2cae22339e2$var$w.addEventListener(\"p\", $4ccfa2cae22339e2$var$noop, $4ccfa2cae22339e2$var$options);\n$4ccfa2cae22339e2$var$w.removeEventListener && $4ccfa2cae22339e2$var$w.removeEventListener(\"p\", $4ccfa2cae22339e2$var$noop, false);\nvar $4ccfa2cae22339e2$export$b0622a6911dbeaf5 = $4ccfa2cae22339e2$var$passiveOptionAccessed;\nvar $4ccfa2cae22339e2$export$ed662207763ba653 = \"PointerEvent\" in $4ccfa2cae22339e2$var$w;\nvar $4ccfa2cae22339e2$var$onTouchStartInWindow = \"ontouchstart\" in $4ccfa2cae22339e2$var$w;\nvar $4ccfa2cae22339e2$var$touchEventInWindow = \"TouchEvent\" in $4ccfa2cae22339e2$var$w;\n// onTouchStartInWindow is the old-old-legacy way to determine a touch device\n// and many websites interpreted it to mean that the device is a touch only phone,\n// so today browsers on a desktop/laptop computer with a touch screen (primary input mouse)\n// have onTouchStartInWindow as false (to prevent from being confused with a\n// touchOnly phone) even though they support the TouchEvents API, so need to check\n// both onTouchStartInWindow and touchEventInWindow for TouchEvent support,\n// however, some browsers (chromium) support the TouchEvents API even when running on\n// a mouse only device (touchEventInWindow true, but onTouchStartInWindow false)\n// so the touchEventInWindow check needs to include an coarse pointer media query\nvar $4ccfa2cae22339e2$export$58e9cbc5718eb8c2 = $4ccfa2cae22339e2$var$onTouchStartInWindow || $4ccfa2cae22339e2$var$touchEventInWindow && $4ccfa2cae22339e2$var$matchMedia(\"(any-pointer: coarse)\").matches;\nvar $4ccfa2cae22339e2$var$hasTouch = ($4ccfa2cae22339e2$var$w.navigator.maxTouchPoints || 0) > 0 || $4ccfa2cae22339e2$export$58e9cbc5718eb8c2;\n// userAgent is used as a backup to correct for known device/browser bugs\n// and when the browser doesn't support interaction media queries (pointer and hover)\n// see https://caniuse.com/css-media-interaction\nvar $4ccfa2cae22339e2$var$userAgent = $4ccfa2cae22339e2$var$w.navigator.userAgent || \"\";\n// iPads now support a mouse that can hover, however the media query interaction\n// feature results always say iPads only have a coarse pointer that can't hover\n// even when a mouse is connected (anyFine and anyHover are always false),\n// this unfortunately indicates a touch only device but iPads should\n// be classified as a hybrid device, so determine if it is an iPad\n// to indicate it should be treated as a hybrid device with anyHover true\nvar $4ccfa2cae22339e2$var$isIPad = $4ccfa2cae22339e2$var$matchMedia(\"(pointer: coarse)\").matches && // both iPad and iPhone can \"request desktop site\", which sets the userAgent to Macintosh\n// so need to check both userAgents to determine if it is an iOS device\n// and screen size to separate iPad from iPhone\n/iPad|Macintosh/.test($4ccfa2cae22339e2$var$userAgent) && Math.min($4ccfa2cae22339e2$var$w.screen.width || 0, $4ccfa2cae22339e2$var$w.screen.height || 0) >= 768;\nvar $4ccfa2cae22339e2$var$hasCoarsePrimaryPointer = ($4ccfa2cae22339e2$var$matchMedia(\"(pointer: coarse)\").matches || // if the pointer is not coarse and not fine then the browser doesn't support\n// interaction media queries (see https://caniuse.com/css-media-interaction)\n// so if it has onTouchStartInWindow assume it has a coarse primary pointer\n!$4ccfa2cae22339e2$var$matchMedia(\"(pointer: fine)\").matches && $4ccfa2cae22339e2$var$onTouchStartInWindow) && // bug in firefox (as of v81) on hybrid windows devices where the interaction media queries\n// always indicate a touch only device (only has a coarse pointer that can't hover)\n// so assume that the primary pointer is not coarse for firefox windows\n!/Windows.*Firefox/.test($4ccfa2cae22339e2$var$userAgent);\nvar $4ccfa2cae22339e2$var$hasAnyHoverOrAnyFinePointer = $4ccfa2cae22339e2$var$matchMedia(\"(any-pointer: fine)\").matches || $4ccfa2cae22339e2$var$matchMedia(\"(any-hover: hover)\").matches || // iPads might have an input device that can hover, so assume it has anyHover\n$4ccfa2cae22339e2$var$isIPad || // if no onTouchStartInWindow then the browser is indicating that it is not a touch only device\n// see above note for supportsTouchEvents\n!$4ccfa2cae22339e2$var$onTouchStartInWindow;\n// a hybrid device is one that both hasTouch and\n// any input can hover or has a fine pointer, or the primary pointer is not coarse\n// if it's not a hybrid, then if it hasTouch it's touchOnly, otherwise it's mouseOnly\nvar $4ccfa2cae22339e2$export$ee7d1a69487f78e9 = $4ccfa2cae22339e2$var$hasTouch && ($4ccfa2cae22339e2$var$hasAnyHoverOrAnyFinePointer || !$4ccfa2cae22339e2$var$hasCoarsePrimaryPointer) ? \"hybrid\" : $4ccfa2cae22339e2$var$hasTouch ? \"touchOnly\" : \"mouseOnly\";\nvar $4ccfa2cae22339e2$export$4d304d2ac56731ab = $4ccfa2cae22339e2$export$ee7d1a69487f78e9 === \"mouseOnly\" ? \"mouse\" : $4ccfa2cae22339e2$export$ee7d1a69487f78e9 === \"touchOnly\" ? \"touch\" : // assume the primaryInput is touch, otherwise assume it's mouse\n$4ccfa2cae22339e2$var$hasCoarsePrimaryPointer ? \"touch\" : \"mouse\";\n\n\nvar $96a6509075960819$exports = {};\n\n$96a6509075960819$exports = (parcelRequire(\"aNJCr\")).getBundleURL(\"3kDX5\") + \"icon-arrow-left.30f94de3.svg\";\n\n\nvar $a0140198a4d59435$exports = {};\n\n$a0140198a4d59435$exports = (parcelRequire(\"aNJCr\")).getBundleURL(\"3kDX5\") + \"icon-arrow-right.e6109eac.svg\";\n\n\nconst $1702485e43274302$var$DIVIDER = 2;\nconst $1702485e43274302$var$NEXT_ITEM = \"Next Item\";\nconst $1702485e43274302$var$PREVIOUS_ITEM = \"Previous Item\";\nconst $1702485e43274302$var$FIRST_NODE_INDEX = 0;\nconst $1702485e43274302$var$SECOND_NODE_INDEX = 1;\nconst $1702485e43274302$var$THIRD_NODE_INDEX = 2;\nconst $1702485e43274302$var$FOURTH_NODE_INDEX = 3;\nconst $1702485e43274302$var$EIGHT_NODE_INDEX = 7;\nconst $1702485e43274302$var$NINTH_NODE_INDEX = 8;\nconst $1702485e43274302$var$myWork = /**@type {Element | null} */ document.querySelector(\".myWork\");\nconst $1702485e43274302$var$liveRegion = /**@type {HTMLParagraphElement} */ document.createElement(\"p\");\nconst $1702485e43274302$var$sliderWrapper = document.querySelector(\"[data-slider-wrapper]\");\nconst $1702485e43274302$var$slider = /**@type {HTMLUListElement} */ document.querySelector(\"[data-slider]\");\nconst $1702485e43274302$var$slides = /**@type {NodeList} */ document.querySelectorAll(\"[data-slide]\");\nconst $1702485e43274302$var$sliderButtonsContainer = document.createElement(\"ul\");\nlet $1702485e43274302$var$counter = 0;\nlet $1702485e43274302$var$delay = 300; // The delay after the event is 'complete' for the callback to run.\nlet $1702485e43274302$var$debouncetimeoutID = /** @type {number | boolean} */ false; // This holds the timeout id.\nlet $1702485e43274302$var$firstNodeIndex = /** @type {number | null} */ null;\nlet $1702485e43274302$var$lastNodeIndex = /** @type {number | null} */ null;\nlet $1702485e43274302$var$firstClonedNodeIndex = /** @type {number | null} */ null;\nlet $1702485e43274302$var$lastClonedNodeIndex = /** @type {number | null} */ null;\nlet $1702485e43274302$var$direction = /**@type {string | nill} */ null;\nlet $1702485e43274302$var$ispressed = false;\nlet $1702485e43274302$var$istouched = false;\nlet $1702485e43274302$var$startMouseTouchX = /** @type {number | null} */ null;\n$1702485e43274302$var$sliderButtonsContainer.className = \"myWork__BtnControls\";\n$1702485e43274302$var$sliderButtonsContainer.insertAdjacentHTML(\"afterbegin\", `<li>      \n    <button type='button' class='btn__previous btn__slider' aria-label='Previous Item'>   \n      <img src='${(0, (/*@__PURE__*/$parcel$interopDefault($96a6509075960819$exports)))}' aria-hidden='true' alt=''>\n    </button>\n  </li>\n  <li>\n    <button type='button' class='btn__next btn__slider' aria-label='Next Item'>\n      <img src='${(0, (/*@__PURE__*/$parcel$interopDefault($a0140198a4d59435$exports)))}' aria-hidden='true' alt=''>\n    </button>\n  </li>`);\n$1702485e43274302$var$myWork?.appendChild($1702485e43274302$var$sliderButtonsContainer);\n/**\n * This function create and clone of the slides and returns it as a NodeList.\n * @returns {NodeList}\n * This function create a cloned of the slides.\n */ function $1702485e43274302$var$createCloneSlides() {\n    const firstCloneNode = $1702485e43274302$var$slides[$1702485e43274302$var$FIRST_NODE_INDEX].cloneNode(true);\n    const secondCloneNode = $1702485e43274302$var$slides[$1702485e43274302$var$SECOND_NODE_INDEX].cloneNode(true);\n    const fourthCloneNode = $1702485e43274302$var$slides[$1702485e43274302$var$slides.length - $1702485e43274302$var$THIRD_NODE_INDEX].cloneNode(true);\n    const lastCloneNode = $1702485e43274302$var$slides[$1702485e43274302$var$slides.length - $1702485e43274302$var$SECOND_NODE_INDEX].cloneNode(true);\n    $1702485e43274302$var$slider?.append(firstCloneNode, secondCloneNode);\n    $1702485e43274302$var$slider?.prepend(fourthCloneNode, lastCloneNode);\n    const cloneNodeSlides = document.querySelectorAll(\"[data-slide]\");\n    return cloneNodeSlides;\n}\nconst $1702485e43274302$var$clonedSlides = $1702485e43274302$var$createCloneSlides();\n/**\n * We create a function that will enable us know the width of the slider and one width of the slide.\n * @returns {Array<number>}\n * This function returns an array of numbers\n */ function $1702485e43274302$var$getElementSizes() {\n    const sliderWidth = $1702485e43274302$var$slider.getBoundingClientRect().width;\n    const sliderGap = parseFloat(getComputedStyle($1702485e43274302$var$slider).gap);\n    const slideWidth = $1702485e43274302$var$clonedSlides[0].getBoundingClientRect().width + sliderGap;\n    return [\n        sliderWidth,\n        sliderGap,\n        slideWidth\n    ];\n}\n/**\n * This function offsets the entire slider the fifth slide in the middle\n * @param {number} slideIndex\n * The takes in a number.\n */ function $1702485e43274302$var$offsetSlider(slideIndex) {\n    $1702485e43274302$var$counter = slideIndex;\n    const [sliderWidth, gap, slideWidth] = $1702485e43274302$var$getElementSizes();\n    const offset = -gap / $1702485e43274302$var$DIVIDER + slideWidth * slideIndex - (sliderWidth - slideWidth) / $1702485e43274302$var$DIVIDER;\n    $1702485e43274302$var$slider.style.transform = `translateX(${offset > 0 ? \"-\" : \"\"}${Math.abs(offset)}px)`;\n}\n/**\n * This function initializes the slide index so that the it offsets to the middle of the slider.\n * @returns {void}\n */ function $1702485e43274302$var$initializeSlideIndex() {\n    // The original index of the second slide that is not cloned in the cloned slides.\n    $1702485e43274302$var$firstNodeIndex = $1702485e43274302$var$clonedSlides.length - $1702485e43274302$var$EIGHT_NODE_INDEX;\n    // The original index of the last slide that is not cloned in the cloned slides.\n    $1702485e43274302$var$lastNodeIndex = $1702485e43274302$var$clonedSlides.length - $1702485e43274302$var$FOURTH_NODE_INDEX;\n    // The index of the first slide that is cloned in the cloned slides\n    $1702485e43274302$var$firstClonedNodeIndex = $1702485e43274302$var$clonedSlides.length - $1702485e43274302$var$THIRD_NODE_INDEX;\n    // The index of last slide that is cloned in the cloned slides\n    $1702485e43274302$var$lastClonedNodeIndex = $1702485e43274302$var$clonedSlides.length - $1702485e43274302$var$NINTH_NODE_INDEX;\n    // Initialize the counter that we would use to track the movement of each slide.\n    // The initial counter will ensure the fifth slide is always at the center.\n    $1702485e43274302$var$counter = Math.floor(($1702485e43274302$var$clonedSlides.length - $1702485e43274302$var$SECOND_NODE_INDEX) / $1702485e43274302$var$DIVIDER);\n    // Ensure that for every transition, the slide is at the center of the viewport.\n    $1702485e43274302$var$offsetSlider($1702485e43274302$var$counter);\n    // Show the active slide to assistive technology.\n    $1702485e43274302$var$showCurrentSlide();\n}\n/**\n * The function shows the slide in the middle of viewport to assistive technologies and hides the transitioning slide form assistive technologies.\n * @returns {void}\n */ function $1702485e43274302$var$showCurrentSlide() {\n    // First we need to know what the current slide is.\n    const currentSlide = $1702485e43274302$var$clonedSlides[$1702485e43274302$var$counter];\n    // Then we need to loop over all the slides and then know which slide match the current slide each time the function is executed\n    $1702485e43274302$var$clonedSlides.forEach(function(clonedSlide) {\n        clonedSlide.setAttribute(\"aria-hidden\", `${currentSlide !== clonedSlide}`);\n    });\n}\n/**\n * This function will be called and the slider will be offset to ensure the active slide is always at the center.\n * @returns {void}\n */ function $1702485e43274302$var$handleResize() {\n    $1702485e43274302$var$offsetSlider($1702485e43274302$var$counter);\n}\n/**\n * The debounce can will help us control how often the 'resize' event is called. The debounce function will only be called when the event stops firing after a certain amount of time.\n * @returns {void}\n * This is the function argument that will handle the called when event stops firing.\n */ function $1702485e43274302$var$debounce() {\n    clearTimeout($1702485e43274302$var$debouncetimeoutID);\n    $1702485e43274302$var$debouncetimeoutID = setTimeout($1702485e43274302$var$handleResize, $1702485e43274302$var$delay);\n}\n/**\n * The function updates the slider.\n * @param {boolean} checkClone\n * This parameter is a string value indicating the direction depending on what the user is using to move the slider. It could be button direction, keyboard arrow keys, mousedown/mouseup, and touch effect.\n */ function $1702485e43274302$var$updateSlide(checkClone) {\n    if ($1702485e43274302$var$direction == $1702485e43274302$var$NEXT_ITEM) {\n        if ($1702485e43274302$var$counter >= $1702485e43274302$var$firstClonedNodeIndex && checkClone) {\n            $1702485e43274302$var$slider.style.transition = \"none\";\n            $1702485e43274302$var$offsetSlider($1702485e43274302$var$firstNodeIndex);\n        } else if (!checkClone) {\n            $1702485e43274302$var$slider.style.transition = \"transform 0.25s ease-in-out\";\n            $1702485e43274302$var$counter++;\n            $1702485e43274302$var$offsetSlider($1702485e43274302$var$counter);\n        }\n    }\n    if ($1702485e43274302$var$direction == $1702485e43274302$var$PREVIOUS_ITEM) {\n        if ($1702485e43274302$var$counter <= $1702485e43274302$var$lastClonedNodeIndex && checkClone) {\n            $1702485e43274302$var$slider.style.transition = \"none\";\n            $1702485e43274302$var$offsetSlider($1702485e43274302$var$lastNodeIndex);\n        } else if (!checkClone) {\n            $1702485e43274302$var$slider.style.transition = \"transform 0.25s ease-in-out\";\n            $1702485e43274302$var$counter--;\n            $1702485e43274302$var$offsetSlider($1702485e43274302$var$counter);\n        }\n    }\n    $1702485e43274302$var$showCurrentSlide();\n}\n/**\n * The functions handles the action that follows the user clicking the button.\n * @param {HTMLButtonElement} btnTarget\n * The function accepts a button element\n */ function $1702485e43274302$var$handleClick(btnTarget) {\n    // We need to know what button has been clicked so we can know the direction to move and transition the slider.\n    $1702485e43274302$var$direction = btnTarget.getAttribute(\"aria-label\");\n    $1702485e43274302$var$updateSlide();\n}\n/**\n * This function tracks the distance covered by the events at both states mousedown/mouseup or touchstart/touchend and determines what direction the slide occurs.\n * @param {number} distanceCovered\n * This is the distance covered by the events along the target element.\n * @param {number} distanceTrigger\n * This helps us know how long the user should apply the pointer across slide before we change slide.\n */ function $1702485e43274302$var$trackDistances(distanceCovered, distanceTrigger) {\n    if (distanceCovered > distanceTrigger) {\n        // Previous Slide\n        $1702485e43274302$var$direction = $1702485e43274302$var$NEXT_ITEM;\n        $1702485e43274302$var$updateSlide();\n    } else if (distanceCovered < -distanceTrigger) {\n        // Next Slide\n        $1702485e43274302$var$direction = $1702485e43274302$var$PREVIOUS_ITEM;\n        $1702485e43274302$var$updateSlide();\n    }\n}\n/**\n * This function will set the reset press/touch state\n * @param {MouseEvent | TouchEvent } evtObj\n * This touch event and the mouse event represented by the UIEvent\n * @returns {void}\n */ function $1702485e43274302$var$startMouseTouchNav(evtObj) {\n    if (!$1702485e43274302$var$ispressed && evtObj instanceof MouseEvent) {\n        $1702485e43274302$var$ispressed = true;\n        $1702485e43274302$var$startMouseTouchX = evtObj.clientX;\n    }\n    if (!$1702485e43274302$var$istouched && evtObj instanceof TouchEvent) {\n        $1702485e43274302$var$istouched = true;\n        $1702485e43274302$var$startMouseTouchX = evtObj.changedTouches[0].pageX;\n    }\n    $1702485e43274302$var$slider.style.cursor = \"grabbing\";\n}\n/**\n * This function handles the mouse down and touch start events.\n * @param {TouchEvent | MouseEvent} evtObj\n * The event to be fired.\n * @returns {void}\n */ function $1702485e43274302$var$endMouseTouchNav(evtObj) {\n    const slideWidth = $1702485e43274302$var$getElementSizes()[$1702485e43274302$var$THIRD_NODE_INDEX];\n    const distanceTrigger = slideWidth / $1702485e43274302$var$DIVIDER;\n    // We monitor the distance by the mouse pointer and track the direction by using a tracker to move to the next/prev slide.\n    if ($1702485e43274302$var$ispressed && evtObj instanceof MouseEvent) {\n        const endMouseTouchX = evtObj.clientX;\n        const distanceClientX = endMouseTouchX - $1702485e43274302$var$startMouseTouchX;\n        $1702485e43274302$var$ispressed = false;\n        $1702485e43274302$var$trackDistances(distanceClientX, distanceTrigger);\n    }\n    // We monitor the distance covered by the touch pointer and track the direction by using a tracker to move to the next/prev slide.\n    if ($1702485e43274302$var$istouched && evtObj instanceof TouchEvent) {\n        const endMouseTouchX = evtObj.changedTouches[0].pageX;\n        const distanceTouchX = endMouseTouchX - $1702485e43274302$var$startMouseTouchX;\n        $1702485e43274302$var$istouched = false;\n        $1702485e43274302$var$trackDistances(distanceTouchX, distanceTrigger);\n    }\n    $1702485e43274302$var$slider.style.cursor = \"grab\";\n}\n/**\n * This function handles the keyboard navigation\n * @param {KeyboardEvent} evtObj\n * The keyboard event object that described the user interaction with the keyboard.\n */ function $1702485e43274302$var$handleKeyNav(evtObj) {\n    if (evtObj instanceof KeyboardEvent) {\n        if (evtObj.key === \"ArrowRight\") {\n            $1702485e43274302$var$direction = $1702485e43274302$var$NEXT_ITEM;\n            $1702485e43274302$var$updateSlide();\n        } else if (evtObj.key === \"ArrowLeft\") {\n            $1702485e43274302$var$direction = $1702485e43274302$var$PREVIOUS_ITEM;\n            $1702485e43274302$var$updateSlide();\n        }\n    }\n}\n/**\n * The function updates the live region that will announced to the user via a screen reader when the transition comes to an end.\n * @returns {void}\n */ function $1702485e43274302$var$updateLiveRegion() {\n    // The announce to the user should be only when it has actually updated and the no other interaction happens\n    $1702485e43274302$var$liveRegion.setAttribute(\"aria-live\", \"polite\");\n    // I want the screen reader's to announce the live region's text in all of its entirety and not just what changed.\n    $1702485e43274302$var$liveRegion.setAttribute(\"aria-atomic\", \"true\");\n    // Visually remove the element form the page.\n    $1702485e43274302$var$liveRegion.setAttribute(\"class\", \"sr-only\");\n    // Update the text so the user knows how many slides they have gone through\n    $1702485e43274302$var$liveRegion.textContent = `Item ${$1702485e43274302$var$counter - 1} of ${$1702485e43274302$var$slides.length}`;\n    // Append it to the work section in the Document Object Model\n    $1702485e43274302$var$myWork?.appendChild($1702485e43274302$var$liveRegion);\n}\n// Handling the Button events\nconst $1702485e43274302$var$sliderButtons = document.querySelectorAll(\".btn__slider\");\n$1702485e43274302$var$sliderButtons.forEach(function(sliderButton) {\n    sliderButton.addEventListener(\"click\", function(evtObj) {\n        const btnTarget = evtObj.target.closest(\".btn__slider\");\n        if (!btnTarget) return;\n        $1702485e43274302$var$handleClick(btnTarget);\n    });\n});\n// Navigation using mouse/track pads and fingers\n$1702485e43274302$var$sliderWrapper.addEventListener(\"mousedown\", $1702485e43274302$var$startMouseTouchNav);\n$1702485e43274302$var$sliderWrapper.addEventListener(\"mouseup\", $1702485e43274302$var$endMouseTouchNav);\n// Older browser try to interpret object in the third argument as a try value in the capture argument. We need to use a feature detection when using this API prevent possible unforeseen results. The aim is to create a passive listener to prevent the preventDefault() from being called on the event making it to block scrolling.\n$1702485e43274302$var$sliderWrapper.addEventListener(\"touchstart\", $1702485e43274302$var$startMouseTouchNav, (0, $4ccfa2cae22339e2$export$b0622a6911dbeaf5) ? {\n    capture: false,\n    passive: true\n} : false);\n$1702485e43274302$var$sliderWrapper.addEventListener(\"touchend\", $1702485e43274302$var$endMouseTouchNav, (0, $4ccfa2cae22339e2$export$b0622a6911dbeaf5) ? {\n    capture: false,\n    passive: true\n} : false);\n// So when the transition comes to an end we want to remove the transition property applied, update the slides, and then update the live region that would be announced to the user.\n$1702485e43274302$var$slider.addEventListener(\"transitionend\", function() {\n    $1702485e43274302$var$updateSlide(true);\n    $1702485e43274302$var$updateLiveRegion();\n});\n// TODO Carry out animation of the different sections when they come into the view of the user on scroll. You can use the IntersectionObserver API to perform this task.\n// When the page loads we want the fifth slide to always be at the center of the view.\nwindow.addEventListener(\"load\", $1702485e43274302$var$initializeSlideIndex);\n// When the user resizes the window we want the any of the slide to always be at the center of the view.\nwindow.addEventListener(\"resize\", $1702485e43274302$var$debounce);\n// When the user keys down on the right and left arrow keys we want to navigate the slider as well making it accessible for keyboard users.\nwindow.addEventListener(\"keydown\", $1702485e43274302$var$handleKeyNav);\n\n})();\n//# sourceMappingURL=index.ce2bb624.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","\"use strict\";\n\nvar bundleURL = {};\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n  return value;\n}\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n  return '/';\n}\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\n// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^/]+/);\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n  return matches[0];\n}\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","require('./helpers/bundle-manifest').register(require('./helpers/bundle-url').getBundleURL('3kDX5'),JSON.parse(\"[\\\"3kDX5\\\",\\\"index.ce2bb624.js\\\",\\\"gGa5s\\\",\\\"icon-arrow-left.30f94de3.svg\\\",\\\"7XIqG\\\",\\\"icon-arrow-right.e6109eac.svg\\\"]\"));","// We want to import a feature detection from the detect-it package\nimport { supportsPassiveEvents } from 'detect-it';\n\n// Dynamically add the button since the functionality will be implemented using JavaScript.\nimport arrowIconLeft from '../assets/images/icon-arrow-left.svg';\nimport arrowIconRight from '../assets/images/icon-arrow-right.svg';\n\nconst DIVIDER = 2;\nconst NEXT_ITEM = 'Next Item';\nconst PREVIOUS_ITEM = 'Previous Item';\nconst FIRST_NODE_INDEX = 0;\nconst SECOND_NODE_INDEX = 1;\nconst THIRD_NODE_INDEX = 2;\nconst FOURTH_NODE_INDEX = 3;\nconst EIGHT_NODE_INDEX = 7;\nconst NINTH_NODE_INDEX = 8;\nconst myWork = /**@type {Element | null} */ (document.querySelector('.myWork'));\nconst liveRegion = /**@type {HTMLParagraphElement} */ (\n  document.createElement('p')\n);\nconst sliderWrapper = document.querySelector('[data-slider-wrapper]');\nconst slider = /**@type {HTMLUListElement} */ (\n  document.querySelector('[data-slider]')\n);\nconst slides = /**@type {NodeList} */ (\n  document.querySelectorAll('[data-slide]')\n);\nconst sliderButtonsContainer = document.createElement('ul');\n\nlet counter = 0;\nlet delay = 300; // The delay after the event is 'complete' for the callback to run.\nlet debouncetimeoutID = /** @type {number | boolean} */ (false); // This holds the timeout id.\nlet firstNodeIndex = /** @type {number | null} */ (null);\nlet lastNodeIndex = /** @type {number | null} */ (null);\nlet firstClonedNodeIndex = /** @type {number | null} */ (null);\nlet lastClonedNodeIndex = /** @type {number | null} */ (null);\nlet direction = /**@type {string | nill} */ (null);\nlet ispressed = false;\nlet istouched = false;\nlet startMouseTouchX = /** @type {number | null} */ (null);\n\nsliderButtonsContainer.className = 'myWork__BtnControls';\nsliderButtonsContainer.insertAdjacentHTML(\n  'afterbegin',\n  `<li>      \n    <button type='button' class='btn__previous btn__slider' aria-label='Previous Item'>   \n      <img src='${arrowIconLeft}' aria-hidden='true' alt=''>\n    </button>\n  </li>\n  <li>\n    <button type='button' class='btn__next btn__slider' aria-label='Next Item'>\n      <img src='${arrowIconRight}' aria-hidden='true' alt=''>\n    </button>\n  </li>`\n);\nmyWork?.appendChild(sliderButtonsContainer);\n\n/**\n * This function create and clone of the slides and returns it as a NodeList.\n * @returns {NodeList}\n * This function create a cloned of the slides.\n */\nfunction createCloneSlides() {\n  const firstCloneNode = slides[FIRST_NODE_INDEX].cloneNode(true);\n  const secondCloneNode = slides[SECOND_NODE_INDEX].cloneNode(true);\n  const fourthCloneNode =\n    slides[slides.length - THIRD_NODE_INDEX].cloneNode(true);\n  const lastCloneNode =\n    slides[slides.length - SECOND_NODE_INDEX].cloneNode(true);\n\n  slider?.append(firstCloneNode, secondCloneNode);\n  slider?.prepend(fourthCloneNode, lastCloneNode);\n\n  const cloneNodeSlides = document.querySelectorAll('[data-slide]');\n  return cloneNodeSlides;\n}\nconst clonedSlides = createCloneSlides();\n\n/**\n * We create a function that will enable us know the width of the slider and one width of the slide.\n * @returns {Array<number>}\n * This function returns an array of numbers\n */\nfunction getElementSizes() {\n  const sliderWidth = slider.getBoundingClientRect().width;\n  const sliderGap = parseFloat(getComputedStyle(slider).gap);\n  const slideWidth = clonedSlides[0].getBoundingClientRect().width + sliderGap;\n  return [sliderWidth, sliderGap, slideWidth];\n}\n\n/**\n * This function offsets the entire slider the fifth slide in the middle\n * @param {number} slideIndex\n * The takes in a number.\n */\nfunction offsetSlider(slideIndex) {\n  counter = slideIndex;\n  const [sliderWidth, gap, slideWidth] = getElementSizes();\n  const offset =\n    -gap / DIVIDER +\n    slideWidth * slideIndex -\n    (sliderWidth - slideWidth) / DIVIDER;\n  slider.style.transform = `translateX(${offset > 0 ? '-' : ''}${Math.abs(offset)}px)`;\n}\n\n/**\n * This function initializes the slide index so that the it offsets to the middle of the slider.\n * @returns {void}\n */\nfunction initializeSlideIndex() {\n  // The original index of the second slide that is not cloned in the cloned slides.\n  firstNodeIndex = clonedSlides.length - EIGHT_NODE_INDEX;\n  // The original index of the last slide that is not cloned in the cloned slides.\n  lastNodeIndex = clonedSlides.length - FOURTH_NODE_INDEX;\n  // The index of the first slide that is cloned in the cloned slides\n  firstClonedNodeIndex = clonedSlides.length - THIRD_NODE_INDEX;\n  // The index of last slide that is cloned in the cloned slides\n  lastClonedNodeIndex = clonedSlides.length - NINTH_NODE_INDEX;\n  // Initialize the counter that we would use to track the movement of each slide.\n  // The initial counter will ensure the fifth slide is always at the center.\n  counter = Math.floor((clonedSlides.length - SECOND_NODE_INDEX) / DIVIDER);\n\n  // Ensure that for every transition, the slide is at the center of the viewport.\n  offsetSlider(counter);\n\n  // Show the active slide to assistive technology.\n  showCurrentSlide();\n}\n\n/**\n * The function shows the slide in the middle of viewport to assistive technologies and hides the transitioning slide form assistive technologies.\n * @returns {void}\n */\nfunction showCurrentSlide() {\n  // First we need to know what the current slide is.\n  const currentSlide = clonedSlides[counter];\n  // Then we need to loop over all the slides and then know which slide match the current slide each time the function is executed\n  clonedSlides.forEach(function (clonedSlide) {\n    clonedSlide.setAttribute('aria-hidden', `${currentSlide !== clonedSlide}`);\n  });\n}\n\n/**\n * This function will be called and the slider will be offset to ensure the active slide is always at the center.\n * @returns {void}\n */\nfunction handleResize() {\n  offsetSlider(counter);\n}\n\n/**\n * The debounce can will help us control how often the 'resize' event is called. The debounce function will only be called when the event stops firing after a certain amount of time.\n * @returns {void}\n * This is the function argument that will handle the called when event stops firing.\n */\nfunction debounce() {\n  clearTimeout(debouncetimeoutID);\n\n  debouncetimeoutID = setTimeout(handleResize, delay);\n}\n\n/**\n * The function updates the slider.\n * @param {boolean} checkClone\n * This parameter is a string value indicating the direction depending on what the user is using to move the slider. It could be button direction, keyboard arrow keys, mousedown/mouseup, and touch effect.\n */\nfunction updateSlide(checkClone) {\n  if (direction == NEXT_ITEM) {\n    if (counter >= firstClonedNodeIndex && checkClone) {\n      slider.style.transition = 'none';\n      offsetSlider(firstNodeIndex);\n    } else if (!checkClone) {\n      slider.style.transition = 'transform 0.25s ease-in-out';\n      counter++;\n      offsetSlider(counter);\n    }\n  }\n\n  if (direction == PREVIOUS_ITEM) {\n    if (counter <= lastClonedNodeIndex && checkClone) {\n      slider.style.transition = 'none';\n      offsetSlider(lastNodeIndex);\n    } else if (!checkClone) {\n      slider.style.transition = 'transform 0.25s ease-in-out';\n      counter--;\n      offsetSlider(counter);\n    }\n  }\n\n  showCurrentSlide();\n}\n\n/**\n * The functions handles the action that follows the user clicking the button.\n * @param {HTMLButtonElement} btnTarget\n * The function accepts a button element\n */\nfunction handleClick(btnTarget) {\n  // We need to know what button has been clicked so we can know the direction to move and transition the slider.\n  direction = btnTarget.getAttribute('aria-label');\n  updateSlide();\n}\n\n/**\n * This function tracks the distance covered by the events at both states mousedown/mouseup or touchstart/touchend and determines what direction the slide occurs.\n * @param {number} distanceCovered\n * This is the distance covered by the events along the target element.\n * @param {number} distanceTrigger\n * This helps us know how long the user should apply the pointer across slide before we change slide.\n */\nfunction trackDistances(distanceCovered, distanceTrigger) {\n  if (distanceCovered > distanceTrigger) {\n    // Previous Slide\n    direction = NEXT_ITEM;\n    updateSlide();\n  } else if (distanceCovered < -distanceTrigger) {\n    // Next Slide\n    direction = PREVIOUS_ITEM;\n    updateSlide();\n  }\n}\n\n/**\n * This function will set the reset press/touch state\n * @param {MouseEvent | TouchEvent } evtObj\n * This touch event and the mouse event represented by the UIEvent\n * @returns {void}\n */\nfunction startMouseTouchNav(evtObj) {\n  if (!ispressed && evtObj instanceof MouseEvent) {\n    ispressed = true;\n    startMouseTouchX = evtObj.clientX;\n  }\n\n  if (!istouched && evtObj instanceof TouchEvent) {\n    istouched = true;\n    startMouseTouchX = evtObj.changedTouches[0].pageX;\n  }\n\n  slider.style.cursor = 'grabbing';\n}\n\n/**\n * This function handles the mouse down and touch start events.\n * @param {TouchEvent | MouseEvent} evtObj\n * The event to be fired.\n * @returns {void}\n */\nfunction endMouseTouchNav(evtObj) {\n  const slideWidth = getElementSizes()[THIRD_NODE_INDEX];\n  const distanceTrigger = slideWidth / DIVIDER;\n\n  // We monitor the distance by the mouse pointer and track the direction by using a tracker to move to the next/prev slide.\n  if (ispressed && evtObj instanceof MouseEvent) {\n    const endMouseTouchX = evtObj.clientX;\n    const distanceClientX = endMouseTouchX - startMouseTouchX;\n    ispressed = false;\n    trackDistances(distanceClientX, distanceTrigger);\n  }\n\n  // We monitor the distance covered by the touch pointer and track the direction by using a tracker to move to the next/prev slide.\n  if (istouched && evtObj instanceof TouchEvent) {\n    const endMouseTouchX = evtObj.changedTouches[0].pageX;\n    const distanceTouchX = endMouseTouchX - startMouseTouchX;\n    istouched = false;\n    trackDistances(distanceTouchX, distanceTrigger);\n  }\n\n  slider.style.cursor = 'grab';\n}\n\n/**\n * This function handles the keyboard navigation\n * @param {KeyboardEvent} evtObj\n * The keyboard event object that described the user interaction with the keyboard.\n */\nfunction handleKeyNav(evtObj) {\n  if (evtObj instanceof KeyboardEvent) {\n    if (evtObj.key === 'ArrowRight') {\n      direction = NEXT_ITEM;\n      updateSlide();\n    } else if (evtObj.key === 'ArrowLeft') {\n      direction = PREVIOUS_ITEM;\n      updateSlide();\n    }\n  }\n}\n\n/**\n * The function updates the live region that will announced to the user via a screen reader when the transition comes to an end.\n * @returns {void}\n */\nfunction updateLiveRegion() {\n  // The announce to the user should be only when it has actually updated and the no other interaction happens\n  liveRegion.setAttribute('aria-live', 'polite');\n  // I want the screen reader's to announce the live region's text in all of its entirety and not just what changed.\n  liveRegion.setAttribute('aria-atomic', 'true');\n  // Visually remove the element form the page.\n  liveRegion.setAttribute('class', 'sr-only');\n  // Update the text so the user knows how many slides they have gone through\n  liveRegion.textContent = `Item ${counter - 1} of ${slides.length}`;\n  // Append it to the work section in the Document Object Model\n  myWork?.appendChild(liveRegion);\n}\n\n// Handling the Button events\nconst sliderButtons = document.querySelectorAll('.btn__slider');\nsliderButtons.forEach(function (sliderButton) {\n  sliderButton.addEventListener('click', function (evtObj) {\n    const btnTarget = evtObj.target.closest('.btn__slider');\n    if (!btnTarget) return;\n    handleClick(btnTarget);\n  });\n});\n\n// Navigation using mouse/track pads and fingers\nsliderWrapper.addEventListener('mousedown', startMouseTouchNav);\nsliderWrapper.addEventListener('mouseup', endMouseTouchNav);\n\n// Older browser try to interpret object in the third argument as a try value in the capture argument. We need to use a feature detection when using this API prevent possible unforeseen results. The aim is to create a passive listener to prevent the preventDefault() from being called on the event making it to block scrolling.\nsliderWrapper.addEventListener(\n  'touchstart',\n  startMouseTouchNav,\n  supportsPassiveEvents ? { capture: false, passive: true } : false\n);\nsliderWrapper.addEventListener(\n  'touchend',\n  endMouseTouchNav,\n  supportsPassiveEvents ? { capture: false, passive: true } : false\n);\n\n// So when the transition comes to an end we want to remove the transition property applied, update the slides, and then update the live region that would be announced to the user.\nslider.addEventListener('transitionend', function () {\n  updateSlide(true);\n  updateLiveRegion();\n});\n\n// TODO Carry out animation of the different sections when they come into the view of the user on scroll. You can use the IntersectionObserver API to perform this task.\n\n// When the page loads we want the fifth slide to always be at the center of the view.\nwindow.addEventListener('load', initializeSlideIndex);\n\n// When the user resizes the window we want the any of the slide to always be at the center of the view.\nwindow.addEventListener('resize', debounce);\n\n// When the user keys down on the right and left arrow keys we want to navigate the slider as well making it accessible for keyboard users.\nwindow.addEventListener('keydown', handleKeyNav);\n","// so it doesn't throw if no window or matchMedia\r\nvar w = typeof window !== 'undefined' ? window : { screen: {}, navigator: {} };\r\nvar matchMedia = (w.matchMedia || (function () { return ({ matches: false }); })).bind(w);\r\n// passive events test\r\n// adapted from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\r\nvar passiveOptionAccessed = false;\r\nvar options = {\r\n    get passive() {\r\n        return (passiveOptionAccessed = true);\r\n    },\r\n};\r\n// have to set and remove a no-op listener instead of null\r\n// (which was used previously), because Edge v15 throws an error\r\n// when providing a null callback.\r\n// https://github.com/rafgraph/detect-passive-events/pull/3\r\n// eslint-disable-next-line @typescript-eslint/no-empty-function\r\nvar noop = function () { };\r\nw.addEventListener && w.addEventListener('p', noop, options);\r\nw.removeEventListener && w.removeEventListener('p', noop, false);\r\nvar supportsPassiveEvents = passiveOptionAccessed;\r\nvar supportsPointerEvents = 'PointerEvent' in w;\r\nvar onTouchStartInWindow = 'ontouchstart' in w;\r\nvar touchEventInWindow = 'TouchEvent' in w;\r\n// onTouchStartInWindow is the old-old-legacy way to determine a touch device\r\n// and many websites interpreted it to mean that the device is a touch only phone,\r\n// so today browsers on a desktop/laptop computer with a touch screen (primary input mouse)\r\n// have onTouchStartInWindow as false (to prevent from being confused with a\r\n// touchOnly phone) even though they support the TouchEvents API, so need to check\r\n// both onTouchStartInWindow and touchEventInWindow for TouchEvent support,\r\n// however, some browsers (chromium) support the TouchEvents API even when running on\r\n// a mouse only device (touchEventInWindow true, but onTouchStartInWindow false)\r\n// so the touchEventInWindow check needs to include an coarse pointer media query\r\nvar supportsTouchEvents = onTouchStartInWindow ||\r\n    (touchEventInWindow && matchMedia('(any-pointer: coarse)').matches);\r\nvar hasTouch = (w.navigator.maxTouchPoints || 0) > 0 || supportsTouchEvents;\r\n// userAgent is used as a backup to correct for known device/browser bugs\r\n// and when the browser doesn't support interaction media queries (pointer and hover)\r\n// see https://caniuse.com/css-media-interaction\r\nvar userAgent = w.navigator.userAgent || '';\r\n// iPads now support a mouse that can hover, however the media query interaction\r\n// feature results always say iPads only have a coarse pointer that can't hover\r\n// even when a mouse is connected (anyFine and anyHover are always false),\r\n// this unfortunately indicates a touch only device but iPads should\r\n// be classified as a hybrid device, so determine if it is an iPad\r\n// to indicate it should be treated as a hybrid device with anyHover true\r\nvar isIPad = matchMedia('(pointer: coarse)').matches &&\r\n    // both iPad and iPhone can \"request desktop site\", which sets the userAgent to Macintosh\r\n    // so need to check both userAgents to determine if it is an iOS device\r\n    // and screen size to separate iPad from iPhone\r\n    /iPad|Macintosh/.test(userAgent) &&\r\n    Math.min(w.screen.width || 0, w.screen.height || 0) >= 768;\r\nvar hasCoarsePrimaryPointer = (matchMedia('(pointer: coarse)').matches ||\r\n    // if the pointer is not coarse and not fine then the browser doesn't support\r\n    // interaction media queries (see https://caniuse.com/css-media-interaction)\r\n    // so if it has onTouchStartInWindow assume it has a coarse primary pointer\r\n    (!matchMedia('(pointer: fine)').matches && onTouchStartInWindow)) &&\r\n    // bug in firefox (as of v81) on hybrid windows devices where the interaction media queries\r\n    // always indicate a touch only device (only has a coarse pointer that can't hover)\r\n    // so assume that the primary pointer is not coarse for firefox windows\r\n    !/Windows.*Firefox/.test(userAgent);\r\nvar hasAnyHoverOrAnyFinePointer = matchMedia('(any-pointer: fine)').matches ||\r\n    matchMedia('(any-hover: hover)').matches ||\r\n    // iPads might have an input device that can hover, so assume it has anyHover\r\n    isIPad ||\r\n    // if no onTouchStartInWindow then the browser is indicating that it is not a touch only device\r\n    // see above note for supportsTouchEvents\r\n    !onTouchStartInWindow;\r\n// a hybrid device is one that both hasTouch and\r\n// any input can hover or has a fine pointer, or the primary pointer is not coarse\r\n// if it's not a hybrid, then if it hasTouch it's touchOnly, otherwise it's mouseOnly\r\nvar deviceType = hasTouch && (hasAnyHoverOrAnyFinePointer || !hasCoarsePrimaryPointer)\r\n    ? 'hybrid'\r\n    : hasTouch\r\n        ? 'touchOnly'\r\n        : 'mouseOnly';\r\nvar primaryInput = deviceType === 'mouseOnly'\r\n    ? 'mouse'\r\n    : deviceType === 'touchOnly'\r\n        ? 'touch'\r\n        : // if the device is a hybrid, then if the primary pointer is coarse\r\n            // assume the primaryInput is touch, otherwise assume it's mouse\r\n            hasCoarsePrimaryPointer\r\n                ? 'touch'\r\n                : 'mouse';\n\nexport { deviceType, primaryInput, supportsPassiveEvents, supportsPointerEvents, supportsTouchEvents };\n//# sourceMappingURL=detect-it.esm.js.map\n","interface noWindow {\n  screen: {\n    width?: number;\n    height?: number;\n  };\n  navigator: {\n    maxTouchPoints?: number;\n    userAgent?: string;\n  };\n  addEventListener?: () => void;\n  removeEventListener?: () => void;\n  matchMedia?: () => { matches: boolean };\n}\n\n// so it doesn't throw if no window or matchMedia\nconst w: Window | noWindow =\n  typeof window !== 'undefined' ? window : { screen: {}, navigator: {} };\nconst matchMedia = (w.matchMedia || (() => ({ matches: false }))).bind(w);\n\n// passive events test\n// adapted from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\nlet passiveOptionAccessed = false;\nconst options = {\n  get passive() {\n    return (passiveOptionAccessed = true);\n  },\n};\n// have to set and remove a no-op listener instead of null\n// (which was used previously), because Edge v15 throws an error\n// when providing a null callback.\n// https://github.com/rafgraph/detect-passive-events/pull/3\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop = () => {};\nw.addEventListener && w.addEventListener('p', noop, options);\nw.removeEventListener && w.removeEventListener('p', noop, false);\n\nexport const supportsPassiveEvents: boolean = passiveOptionAccessed;\n\nexport const supportsPointerEvents: boolean = 'PointerEvent' in w;\n\nconst onTouchStartInWindow = 'ontouchstart' in w;\nconst touchEventInWindow = 'TouchEvent' in w;\n// onTouchStartInWindow is the old-old-legacy way to determine a touch device\n// and many websites interpreted it to mean that the device is a touch only phone,\n// so today browsers on a desktop/laptop computer with a touch screen (primary input mouse)\n// have onTouchStartInWindow as false (to prevent from being confused with a\n// touchOnly phone) even though they support the TouchEvents API, so need to check\n// both onTouchStartInWindow and touchEventInWindow for TouchEvent support,\n// however, some browsers (chromium) support the TouchEvents API even when running on\n// a mouse only device (touchEventInWindow true, but onTouchStartInWindow false)\n// so the touchEventInWindow check needs to include an coarse pointer media query\nexport const supportsTouchEvents: boolean =\n  onTouchStartInWindow ||\n  (touchEventInWindow && matchMedia('(any-pointer: coarse)').matches);\n\nconst hasTouch = (w.navigator.maxTouchPoints || 0) > 0 || supportsTouchEvents;\n\n// userAgent is used as a backup to correct for known device/browser bugs\n// and when the browser doesn't support interaction media queries (pointer and hover)\n// see https://caniuse.com/css-media-interaction\nconst userAgent = w.navigator.userAgent || '';\n\n// iPads now support a mouse that can hover, however the media query interaction\n// feature results always say iPads only have a coarse pointer that can't hover\n// even when a mouse is connected (anyFine and anyHover are always false),\n// this unfortunately indicates a touch only device but iPads should\n// be classified as a hybrid device, so determine if it is an iPad\n// to indicate it should be treated as a hybrid device with anyHover true\nconst isIPad =\n  matchMedia('(pointer: coarse)').matches &&\n  // both iPad and iPhone can \"request desktop site\", which sets the userAgent to Macintosh\n  // so need to check both userAgents to determine if it is an iOS device\n  // and screen size to separate iPad from iPhone\n  /iPad|Macintosh/.test(userAgent) &&\n  Math.min(w.screen.width || 0, w.screen.height || 0) >= 768;\n\nconst hasCoarsePrimaryPointer =\n  (matchMedia('(pointer: coarse)').matches ||\n    // if the pointer is not coarse and not fine then the browser doesn't support\n    // interaction media queries (see https://caniuse.com/css-media-interaction)\n    // so if it has onTouchStartInWindow assume it has a coarse primary pointer\n    (!matchMedia('(pointer: fine)').matches && onTouchStartInWindow)) &&\n  // bug in firefox (as of v81) on hybrid windows devices where the interaction media queries\n  // always indicate a touch only device (only has a coarse pointer that can't hover)\n  // so assume that the primary pointer is not coarse for firefox windows\n  !/Windows.*Firefox/.test(userAgent);\n\nconst hasAnyHoverOrAnyFinePointer =\n  matchMedia('(any-pointer: fine)').matches ||\n  matchMedia('(any-hover: hover)').matches ||\n  // iPads might have an input device that can hover, so assume it has anyHover\n  isIPad ||\n  // if no onTouchStartInWindow then the browser is indicating that it is not a touch only device\n  // see above note for supportsTouchEvents\n  !onTouchStartInWindow;\n\n// a hybrid device is one that both hasTouch and\n// any input can hover or has a fine pointer, or the primary pointer is not coarse\n// if it's not a hybrid, then if it hasTouch it's touchOnly, otherwise it's mouseOnly\nexport const deviceType: 'mouseOnly' | 'touchOnly' | 'hybrid' =\n  hasTouch && (hasAnyHoverOrAnyFinePointer || !hasCoarsePrimaryPointer)\n    ? 'hybrid'\n    : hasTouch\n    ? 'touchOnly'\n    : 'mouseOnly';\n\nexport const primaryInput: 'mouse' | 'touch' =\n  deviceType === 'mouseOnly'\n    ? 'mouse'\n    : deviceType === 'touchOnly'\n    ? 'touch'\n    : // if the device is a hybrid, then if the primary pointer is coarse\n    // assume the primaryInput is touch, otherwise assume it's mouse\n    hasCoarsePrimaryPointer\n    ? 'touch'\n    : 'mouse';\n","module.exports = require('./helpers/bundle-url').getBundleURL('3kDX5') + \"icon-arrow-left.30f94de3.svg\";","module.exports = require('./helpers/bundle-url').getBundleURL('3kDX5') + \"icon-arrow-right.e6109eac.svg\";"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$0380ce8f1f064ccc$export$6503ec6e8aabbaf","$0380ce8f1f064ccc$var$mapping","Map","baseUrl","manifest","i","length","path","$7dd1ddf6834435ca$export$bdfd709ae4826697","$7dd1ddf6834435ca$var$bundleURL","value","$7dd1ddf6834435ca$var$getBundleURL","matches","stack","match","replace","getBundleURL","JSON","parse","$4ccfa2cae22339e2$var$w","screen","navigator","$4ccfa2cae22339e2$var$matchMedia","matchMedia","bind","$4ccfa2cae22339e2$var$passiveOptionAccessed","$4ccfa2cae22339e2$var$noop","addEventListener","passive","removeEventListener","$4ccfa2cae22339e2$export$b0622a6911dbeaf5","$4ccfa2cae22339e2$var$onTouchStartInWindow","$4ccfa2cae22339e2$var$touchEventInWindow","maxTouchPoints","$4ccfa2cae22339e2$var$userAgent","userAgent","test","Math","width","height","$96a6509075960819$exports","$a0140198a4d59435$exports","$1702485e43274302$var$NEXT_ITEM","$1702485e43274302$var$PREVIOUS_ITEM","$1702485e43274302$var$myWork","document","querySelector","$1702485e43274302$var$liveRegion","createElement","$1702485e43274302$var$sliderWrapper","$1702485e43274302$var$slider","$1702485e43274302$var$slides","querySelectorAll","$1702485e43274302$var$sliderButtonsContainer","$1702485e43274302$var$counter","$1702485e43274302$var$debouncetimeoutID","$1702485e43274302$var$firstNodeIndex","$1702485e43274302$var$lastNodeIndex","$1702485e43274302$var$firstClonedNodeIndex","$1702485e43274302$var$lastClonedNodeIndex","$1702485e43274302$var$direction","$1702485e43274302$var$ispressed","$1702485e43274302$var$istouched","$1702485e43274302$var$startMouseTouchX","className","insertAdjacentHTML","appendChild","$1702485e43274302$var$clonedSlides","$1702485e43274302$var$createCloneSlides","firstCloneNode","cloneNode","secondCloneNode","fourthCloneNode","lastCloneNode","append","prepend","$1702485e43274302$var$getElementSizes","sliderWidth","getBoundingClientRect","sliderGap","parseFloat","getComputedStyle","gap","slideWidth","$1702485e43274302$var$offsetSlider","slideIndex","offset","style","transform","abs","$1702485e43274302$var$showCurrentSlide","currentSlide","forEach","clonedSlide","setAttribute","$1702485e43274302$var$handleResize","$1702485e43274302$var$updateSlide","checkClone","transition","$1702485e43274302$var$trackDistances","distanceCovered","distanceTrigger","$1702485e43274302$var$startMouseTouchNav","evtObj","MouseEvent","clientX","TouchEvent","changedTouches","pageX","cursor","$1702485e43274302$var$endMouseTouchNav","distanceClientX","endMouseTouchX","distanceTouchX","$1702485e43274302$var$sliderButtons","sliderButton","btnTarget","target","closest","getAttribute","capture","textContent","floor","clearTimeout","setTimeout","KeyboardEvent","key"],"version":3,"file":"index.ce2bb624.js.map"}